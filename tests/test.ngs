#!/usr/bin/env ngs

# ---------- Environment sanity checks ----------
if 'BEAME_DIR' in ENV {
	throw Error("BEAME_DIR environment variable must be unset for tests")
}

HOME = ENV.HOME
BEAME_DIR = HOME / '.beame'
if Path(BEAME_DIR) {
	throw Error("Beame directory exists ($BEAME_DIR). Will not run tests.")
}

BEAME_INSTA_SSL_BIN = '../main.js'
BEAME_SDK_BIN =  '../node_modules/beame-sdk/src/cli/beame.js'
BEAME_TESTS_ROOT_CREDS_FQDN = ENV.get('BEAME_TESTS_ROOT_CREDS_FQDN', 'n6ge8i9q4b4b5vb6.h40d7vrwir2oxlnn.v1.d.beameio.net')
BEAME_INTERNAL_AUTH_SERVER_FQDN = ENV.get('BEAME_INTERNAL_AUTH_SERVER_FQDN', 'p2payp4q8f5ruo22.q6ujqecc83gg6fod.v1.d.beameio.net')
EXPECTED_EXPORTED_FILE_EXTENSIONS = %[pem key chain.p7b pkcs12 pkcs12.pwd]

if not(File(BEAME_INSTA_SSL_BIN)) {
   die("Could not find beame binary BEAME_INSTA_SSL_BIN $BEAME_INSTA_SSL_BIN")
}
if not(File(BEAME_SDK_BIN)) {
   die("Could not find beame binary BEAME_SDK_BIN $BEAME_SDK_BIN")
}

# ---------- Utilities ----------

F base64decode(s:Str) `echo $s | base64 -d`

F fqdn_dir(fqdn) BEAME_DIR / 'v2' / fqdn

# ---------- Tests code ----------


doc Copies Beame test requests signing credential into store for L0 entity creation
F copy_to_store() {
	$(cp -a "$HOME/$BEAME_TESTS_ROOT_CREDS_FQDN" "$HOME/.beame/v2/$BEAME_TESTS_ROOT_CREDS_FQDN")
	'Copied'
}

doc Creates token needed for signing request for level 0 entity
F create_token() {
	global token = `$BEAME_SDK_BIN token create --fqdn $BEAME_TESTS_ROOT_CREDS_FQDN --data NONE`
	assert(token is Str, "Token expected to be a string")
	TestMessage(token)
}

doc Creates level 0 entity
F create_entity() {
	global fqdn
	t = time()
	beame_insta_ssl_token = {
		'authToken': token.base64decode().decode()
		'authSrvFqdn': ENV.BEAME_INTERNAL_AUTH_SERVER_FQDN
		'name': "insta-ssl-test-L0-$t"
		'email': "insta-ssl-L0-${t}@example.com"
	}

	entity = ``$BEAME_INSTA_SSL_BIN creds getCreds --regToken ${beame_insta_ssl_token.encode_json()} --format json``
    assert_hash(entity, "Entity must be hash")
    fqdn = entity.fqdn

	TestMessage("Entity $fqdn created")
}

doc Removes Beame test requests signing credential from store
F remove_from_store() {
	$(rm -r ${fqdn_dir(BEAME_TESTS_ROOT_CREDS_FQDN)})
	TestMessage('Removed')
}

doc Checks that process outputs specific text and exists with non-zero code
F should_fail_with_text(cp:CommandsPipeline, text:Str) {
	try {
		$($cp)
		throw TestFail('Exited with code 0')
	} catch(e:ProcessFail) {
		text not in e.process.stdout throws TestFail("No expected text in output")
		return 'Expected text found'
	}
}

doc Waits till hostname becomes resolvable (has DNS record)
F test_dns(fqdn:Str) {

    test("Change DNS to A record") with {
    	ip = '10.' + (rand.partial(256) * 3).map(Str).join(".")
    	$($BEAME_INSTA_SSL_BIN creds setDns --fqdn $fqdn --value $ip --format json)
    	assert_resolvable(fqdn, check={A == [ip]})
    }

    test("Change DNS to CNAME record") with {
    	cname = CHARS::ascii_lowercase.rand(16) + '.example.com'
    	$($BEAME_INSTA_SSL_BIN creds setDns --fqdn $fqdn --value $cname --format json)
    	assert_resolvable(fqdn, check={"${cname}." in A})
    }

    test("Delete DNS record") with {
    	deleted_fqdn = ``$BEAME_INSTA_SSL_BIN creds deleteDns --fqdn $fqdn --format json``
    	# -- TODO assert unresolvable
    	assert_eq(deleted_fqdn,fqdn,"Deleted fqdn matched to requested")
    }

}

F corrupt_metadata_json() {
	metadata = ``cat "${fqdn_dir(fqdn)}/metadata.json"``
	metadata.name = 'corrupted'
	$(echo ${metadata.encode_json()} >"${fqdn_dir(fqdn)}/metadata.json")
	metadata_json_ok(fqdn) throws TestFail("Metadata JSON is OK while should be corrupted")
	TestMessage("Metadata file corrupted")
}

F metadata_json_ok(fqdn) {
	metadata = ``cat "${fqdn_dir(fqdn)}/metadata.json"``
	metadata.name != 'corrupted'
}

# ---------- No certificates test ----------

test("Run without certificates (old CLI)") with {
	should_fail_with_text(%($BEAME_INSTA_SSL_BIN list), 'you have no certificates')
}

test("Run without certificates (new CLI, text)") with {
	should_fail_with_text(%($BEAME_INSTA_SSL_BIN creds list), 'you have no certificates')
}

test("Creds list without certificates (new CLI, json)") with {
	assert_eq(``$BEAME_INSTA_SSL_BIN creds list --format json``, [], 'Empty creds list')
}

test("Signers list without certificates (new CLI, json)") with {
	assert_eq(``$BEAME_INSTA_SSL_BIN creds signers --format json``, [], 'Empty signers list')
}

# ---------- One certificate test ----------

test("Copy $BEAME_TESTS_ROOT_CREDS_FQDN into store", copy_to_store)
test("Create token for test L0 entity", create_token)
test("Create test L0 entity", create_entity);
test("Remove $BEAME_TESTS_ROOT_CREDS_FQDN from store", remove_from_store)

test("List certificates - one certificate (old CLI)", {
	fqdns = `$BEAME_INSTA_SSL_BIN list`.lines()
	assert(fqdns == [fqdn])
	TestMessage('List is OK')
})

test("List certificates - one certificate (new CLI, text)", {
	out = `$BEAME_INSTA_SSL_BIN creds list`.lines()
	assert(out.len() == 5)
	assert(out[1] ~ /name.*fqdn.*parent.*valid.*priv/)
	assert(fqdn in out[3])
	TestMessage('List is OK')
})

test("List certificates - one certificate (new CLI, json)", {
	certs = ``$BEAME_INSTA_SSL_BIN creds list --format json``
	assert(certs.metadata.fqdn == [fqdn])
	TestMessage('List is OK')
})

test("List signers certificates - one certificate", {
	certs = ``$BEAME_INSTA_SSL_BIN creds signers --format json``
	assert(certs.fqdn == [fqdn])
	TestMessage('Signers list is OK')
})

test("Fix metadata (old CLI)", {
	corrupt_metadata_json()
	$($BEAME_INSTA_SSL_BIN syncmeta)
	metadata_json_ok(fqdn).not() throws TestFail("Metadata JSON is not OK")
})

test("Fix metadata (new CLI)", {
	corrupt_metadata_json()
	$($BEAME_INSTA_SSL_BIN creds syncmeta --fqdn $fqdn)
	metadata_json_ok(fqdn).not() throws TestFail("Metadata JSON is not OK")
})

each({
	"old": %($BEAME_INSTA_SSL_BIN export $fqdn DIR)
	"new": %($BEAME_INSTA_SSL_BIN creds exportCred --fqdn $fqdn --dir DIR)
}, F(cli_type:Str, cp:CommandsPipeline) {
	test("Export certificate ($cli_type CLI)", {
		dir = `mktemp -d test-beame-insta-ssl.XXXXXXXXXX` - MaybeSfx('\n')
		cp.commands[0].argv .= replace('DIR', dir)
		finally(
			body = {
				$($cp)
				EXPECTED_EXPORTED_FILE_EXTENSIONS.each(F(ext) {
					f = "$dir/$fqdn.$ext"
					not($(test -s $f)) throws TestFail("File $f not found")
				})
			},
			cleanup = {
				$(rm -r $dir)
			})
		TestMessage('All expected files are present')
	})
})

# ---------------------------test_dns(fqdn)

if not(ENV.get('SKIP_TUNNELS')) {
	test("Tunnel without FQDN", {
		$(top_level:: ./test_tunnels.ngs --no-use_fqdn $fqdn)
	})
}

# ---------- 2 or more certificates test ----------

old_fqdn = fqdn
test("Copy $BEAME_TESTS_ROOT_CREDS_FQDN into store", copy_to_store)
test("Create token for additional test L0 entity", create_token)
test("Create additional test L0 entity", create_entity)
test("Remove $BEAME_TESTS_ROOT_CREDS_FQDN from store", remove_from_store)

test("Fix metadata (old CLI)", {
	corrupt_metadata_json()
	$($BEAME_INSTA_SSL_BIN syncmeta --fqdn $fqdn)
	metadata_json_ok(fqdn).not() throws TestFail("Metadata JSON is not OK")
})

test("Fix metadata (new CLI)", {
	corrupt_metadata_json()
	$($BEAME_INSTA_SSL_BIN creds syncmeta --fqdn $fqdn)
	metadata_json_ok(fqdn).not() throws TestFail("Metadata JSON is not OK")
})


test("List certificates - two certificates (old CLI)", {
	certs = `$BEAME_INSTA_SSL_BIN list`.lines()
	assert(certs.sort() == [old_fqdn, fqdn].sort())
})

test("List certificates - two certificates (new CLI, text)", {
	# TODO: factor out textual output check
	out = `$BEAME_INSTA_SSL_BIN creds list`.lines()
	assert(out.len() == 7)
	assert(out[1] ~ /name.*fqdn.*parent.*valid.*priv/)
	assert(out.any(fqdn in X))
	assert(out.any(old_fqdn in X))
	TestMessage('List is OK')
})

test("List certificates - two certificates (new CLI, json)", {
	certs = ``$BEAME_INSTA_SSL_BIN creds list --format json``
	assert(certs.metadata.fqdn.sort() == [old_fqdn, fqdn].sort())
	TestMessage('List is OK')
})

if not(ENV.get('SKIP_TUNNELS')) {
	test("Tunnels", {
		$(top_level:: ./test_tunnels.ngs $fqdn)
	})
}

test("Renewing cert for $fqdn") with {
	# TODO: check with other args
	$($BEAME_INSTA_SSL_BIN creds renewCert --fqdn $fqdn --format json)
	"Renew done"
}


# TESTS FROM SDK

test("[Registration token] Generate") with {
	global reg_token
	t = time()
	reg_token = `$BEAME_INSTA_SSL_BIN creds getRegToken --fqdn $fqdn --name "insta-ssl-test-L1-$t" --email "insta-ssl-L1-${t}@example.com"`
}

test("[Registration token] Use") with {
	# TODO: check content
	child_entity = ``$BEAME_INSTA_SSL_BIN creds getCreds --regToken $reg_token --format json``
}


entity_name_pfx = "sdk-test-${time()}-${pid()}"
F create_entity_under_fqdn(fqdn, idx) {
	entity_name_pfx = "insta-ssl-test-${time()}-${pid()}"
	entity = ``$BEAME_INSTA_SSL_BIN creds getCreds --name "${entity_name_pfx}-${idx}" --email "${entity_name_pfx}-${idx}@example.com" --fqdn $fqdn --format json``
	entity.assert_hash_keys(%[parent_fqdn level email name], "Entity hash keys")
	entity.fqdn
}

tcp_test_fqdn = fqdn
for(i;2) {
	# These tests must be towards the end as they update fqdn variable
	test("Iteration [${i+1}/2] [fqdn $fqdn]") with {
		global fqdn
		fqdn = create_entity_under_fqdn(fqdn, i)
		TestMessage("New entity: $fqdn")
	}
}

test("TCP tunnel wrapper") with {
	$(top_level:: ./test_tcp_tunnel.ngs $tcp_test_fqdn)
}

test_dns(fqdn)

test("OCSP test") with {
	s = ``$BEAME_INSTA_SSL_BIN creds checkOcsp --fqdn $fqdn --format json``
	assert_eq(s, 'Good', "Ocsp status ${fqdn} is OK")
}

test("Certificate before revocation is a signer certificte") with {
	certs = ``$BEAME_INSTA_SSL_BIN creds signers --format json``
	assert(fqdn in certs.fqdn)
	TestMessage("Signers list does contain credentials: $fqdn")
}

test("Revoke cert") with {
	# TODO: real test
	# TODO: test with children - should get "can't be revoked, because children exists"
	s = ``$BEAME_INSTA_SSL_BIN creds revokeCert --signerFqdn $fqdn --fqdn $fqdn --format json``
	echo("revoke message ${s.message}")
	s.assert_hash_keys(%[message])
    assert_has(s.message, "$fqdn Certificate has been revoked successfully")
}

test("Revoked certificate is not a signer certificte") with {
	certs = ``$BEAME_INSTA_SSL_BIN creds signers --format json``
	assert(fqdn not in certs.fqdn)
	TestMessage("Signers list does not contain revoked credentials: $fqdn")
}

test("OCSP test after revocation") with {
	s = retry(body={try ``$BEAME_INSTA_SSL_BIN creds checkOcsp --fqdn $fqdn --format json``},success_predicate={A=='Revoked'},fail_cb={throw TestFail("Check OCSP for $fqdn failed")})
	assert_eq(s, 'Revoked', "Ocsp status ${fqdn} is OK")
}

echo("All tests passed")
